// <auto-generated />
using System;
using DBTallerM;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DBTallerM.Migrations
{
    [DbContext(typeof(TallerContext))]
    [Migration("20220825035134_IntDB")]
    partial class IntDB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DBTallerM.Models.Administrativo", b =>
                {
                    b.Property<int>("AdmId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AdmID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdmId"), 1L, 1);

                    b.Property<string>("NivelEstudio")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("PersonaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaID");

                    b.HasKey("AdmId");

                    b.ToTable("Administrativo", (string)null);
                });

            modelBuilder.Entity("DBTallerM.Models.Cliente", b =>
                {
                    b.Property<int>("ClienteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ClienteID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClienteId"), 1L, 1);

                    b.Property<string>("Correo")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<int?>("PersonaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaID");

                    b.HasKey("ClienteId");

                    b.HasIndex("PersonaId");

                    b.ToTable("Cliente", (string)null);
                });

            modelBuilder.Entity("DBTallerM.Models.Diagnostico", b =>
                {
                    b.Property<int>("DiagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DiagID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DiagId"), 1L, 1);

                    b.Property<string>("Repuesto")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("RevisionNiveles")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TipoRepuesto")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TipoRevision")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("VehiculoId")
                        .HasColumnType("int")
                        .HasColumnName("VehiculoID");

                    b.HasKey("DiagId");

                    b.HasIndex("VehiculoId");

                    b.ToTable("Diagnostico", (string)null);
                });

            modelBuilder.Entity("DBTallerM.Models.Direccion", b =>
                {
                    b.Property<int>("DireccionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DireccionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DireccionId"), 1L, 1);

                    b.Property<string>("Num1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Num2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Num3")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TipoCalle")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Zona")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("DireccionId");

                    b.ToTable("Direccion", (string)null);
                });

            modelBuilder.Entity("DBTallerM.Models.Mecanico", b =>
                {
                    b.Property<int>("MecanicoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MecanicoID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MecanicoId"), 1L, 1);

                    b.Property<string>("NivelEstudios")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("PersonaId")
                        .HasColumnType("int")
                        .HasColumnName("PersonaID");

                    b.HasKey("MecanicoId");

                    b.HasIndex("PersonaId");

                    b.ToTable("Mecanico", (string)null);
                });

            modelBuilder.Entity("DBTallerM.Models.Persona", b =>
                {
                    b.Property<int>("PersonaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PersonaID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PersonaId"), 1L, 1);

                    b.Property<string>("Apellido")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<int>("DireccionId")
                        .HasColumnType("int")
                        .HasColumnName("DireccionID");

                    b.Property<string>("Nombre")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<int?>("Telefono")
                        .HasColumnType("int");

                    b.HasKey("PersonaId");

                    b.HasIndex("DireccionId");

                    b.ToTable("Persona", (string)null);
                });

            modelBuilder.Entity("DBTallerM.Models.Soat", b =>
                {
                    b.Property<int>("SoatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SoatID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SoatId"), 1L, 1);

                    b.Property<DateTime?>("FechaVencimiento")
                        .HasColumnType("date");

                    b.Property<string>("PuedeTransitar")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("VehiculoId")
                        .HasColumnType("int")
                        .HasColumnName("VehiculoID");

                    b.HasKey("SoatId");

                    b.HasIndex("VehiculoId");

                    b.ToTable("Soat", (string)null);
                });

            modelBuilder.Entity("DBTallerM.Models.Vehiculo", b =>
                {
                    b.Property<int>("VehiculoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("VehiculoID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehiculoId"), 1L, 1);

                    b.Property<int?>("CapacidadPasajeros")
                        .HasColumnType("int");

                    b.Property<int?>("Cilindrada")
                        .HasColumnType("int");

                    b.Property<int>("ClienteId")
                        .HasColumnType("int")
                        .HasColumnName("ClienteID");

                    b.Property<string>("Marca")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<int>("MecanicoId")
                        .HasColumnType("int")
                        .HasColumnName("MecanicoID");

                    b.Property<string>("Placa")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("TipoVehiculo")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.HasKey("VehiculoId");

                    b.HasIndex("ClienteId");

                    b.HasIndex("MecanicoId");

                    b.ToTable("Vehiculo", (string)null);
                });

            modelBuilder.Entity("DBTallerM.Models.Cliente", b =>
                {
                    b.HasOne("DBTallerM.Models.Persona", "Persona")
                        .WithMany("Clientes")
                        .HasForeignKey("PersonaId")
                        .HasConstraintName("FK_Cliente_Persona");

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("DBTallerM.Models.Diagnostico", b =>
                {
                    b.HasOne("DBTallerM.Models.Vehiculo", "Vehiculo")
                        .WithMany("Diagnosticos")
                        .HasForeignKey("VehiculoId")
                        .IsRequired()
                        .HasConstraintName("FK_Diagnostico_Vehiculo");

                    b.Navigation("Vehiculo");
                });

            modelBuilder.Entity("DBTallerM.Models.Mecanico", b =>
                {
                    b.HasOne("DBTallerM.Models.Persona", "Persona")
                        .WithMany("Mecanicos")
                        .HasForeignKey("PersonaId")
                        .IsRequired()
                        .HasConstraintName("FK_Mecanico_Persona");

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("DBTallerM.Models.Persona", b =>
                {
                    b.HasOne("DBTallerM.Models.Direccion", "Direccion")
                        .WithMany("Personas")
                        .HasForeignKey("DireccionId")
                        .IsRequired()
                        .HasConstraintName("FK_Direccion_Persona");

                    b.Navigation("Direccion");
                });

            modelBuilder.Entity("DBTallerM.Models.Soat", b =>
                {
                    b.HasOne("DBTallerM.Models.Vehiculo", "Vehiculo")
                        .WithMany("Soats")
                        .HasForeignKey("VehiculoId")
                        .IsRequired()
                        .HasConstraintName("FK_Soat_Vehiculo");

                    b.Navigation("Vehiculo");
                });

            modelBuilder.Entity("DBTallerM.Models.Vehiculo", b =>
                {
                    b.HasOne("DBTallerM.Models.Cliente", "Cliente")
                        .WithMany("Vehiculos")
                        .HasForeignKey("ClienteId")
                        .IsRequired()
                        .HasConstraintName("FK_Vehiculo_Cliente");

                    b.HasOne("DBTallerM.Models.Mecanico", "Mecanico")
                        .WithMany("Vehiculos")
                        .HasForeignKey("MecanicoId")
                        .IsRequired()
                        .HasConstraintName("FK_Vehiculo_Mecanico");

                    b.Navigation("Cliente");

                    b.Navigation("Mecanico");
                });

            modelBuilder.Entity("DBTallerM.Models.Cliente", b =>
                {
                    b.Navigation("Vehiculos");
                });

            modelBuilder.Entity("DBTallerM.Models.Direccion", b =>
                {
                    b.Navigation("Personas");
                });

            modelBuilder.Entity("DBTallerM.Models.Mecanico", b =>
                {
                    b.Navigation("Vehiculos");
                });

            modelBuilder.Entity("DBTallerM.Models.Persona", b =>
                {
                    b.Navigation("Clientes");

                    b.Navigation("Mecanicos");
                });

            modelBuilder.Entity("DBTallerM.Models.Vehiculo", b =>
                {
                    b.Navigation("Diagnosticos");

                    b.Navigation("Soats");
                });
#pragma warning restore 612, 618
        }
    }
}
